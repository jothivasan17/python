# Creating an empty tuple 
empty_tuple = () 
print("Empty tuple: ", empty_tuple) 
 
 
int_tuple = (4, 6, 8, 10, 12, 14) 
print("Tuple with integers: ", int_tuple) 
 
mixed_tuple = (4, "Python", 9.3) 
print("Tuple with different data types: ", mixed_tuple) 
 
 
nested_tuple = ("Python", {4: 5, 6: 2, 8:2}, (5, 3, 5, 6)) 
print("A nested tuple: ", nested_tuple)

program2

tuple_ = ("Python", "Tuple", "Ordered", "Immutable", "Collection", "Objects")

print("Elements between indices 1 and 3: ", tuple_[1:3]) 
# Using negative indexing in slicing 
print("Elements between indices 0 and -4: ", tuple_[:-4]) 
# Printing the entire tuple by using the default start and end values. 
print("Entire tuple: ", tuple_[:])


PROGRAM3: 
# Python program to show how to delete elements of a Python tuple 
# Creating a tuple 
tuple_ = ("Python", "Tuple", "Ordered", "Immutable", "Collection", "Objects") 
# Deleting a particular element of the tuple 
try: 
del tuple_[3] 
print(tuple_) 
except Exception as e: 
print(e) 
# Deleting the variable from the global space of the program 
del tuple_ 
# Trying accessing the tuple after deleting it 
try: 
print(tuple_) 
except Exception as e: 
print(e) 

PROGRAM4: 
# Creating tuples 
Tuple_data = (0, 1, 2, 3, 2, 3, 1, 3, 2) 
# getting the index of 3 
res = Tuple_data.index(3) 
print('First occurrence of 1 is', res) 
# index 
res = Tuple_data.index(3, 4) 
print('First occurrence of 1 after 4th index is:', res)