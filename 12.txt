from datetime import datetime

# Define input and output file names
INPUT_FILE = "data_input.txt"
OUTPUT_FILE = "data_output.txt"

def read_file(file_path):
    """Read lines from a file and return them as a list."""
    try:
        with open(file_path, "r") as file:
            data = file.readlines()
            print("File read successfully.")
            return data
    except FileNotFoundError:
        print(f"Error: File '{file_path}' not found.")
    except IOError:
        print("Error: Issue with reading the file.")
    return None

def process_data(data):
    """Convert each line to an integer and calculate the square."""
    processed_data = []
    try:
        for line in data:
            number = int(line.strip())  # Attempt to convert to integer
            squared = number ** 2  # Calculate square
            processed_data.append(f"{number} squared is {squared}")
        print("Data processed successfully.")
        return processed_data
    except ValueError as e:
        print(f"Error: Invalid data. Cannot convert to integer. {e}")
    return None

def write_file(file_path, data):
    """Write processed data to a file with a timestamp."""
    try:
        with open(file_path, "w") as file:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            file.write(f"Processed Data (generated on {timestamp}):\n")
            for line in data:
                file.write(line + "\n")
            print("Data written successfully.")
    except IOError:
        print("Error: Issue with writing to the file.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

def main():
    # Step 1: Read data from the input file
    data = read_file(INPUT_FILE)
    if data is None:
        print("Terminating program due to read error.")
        return

    # Step 2: Process the data
    processed_data = process_data(data)
    if processed_data is None:
        print("Terminating program due to processing error.")
        return

    # Step 3: Write processed data to the output file
    write_file(OUTPUT_FILE, processed_data)

if __name__ == "__main__":
    main()
